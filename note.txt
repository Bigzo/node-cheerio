cheerio API

一、cheerio
为服务器特别定制的，快速，灵活，实施的jQuery核心实现。
例子：
    var cheerio = require("cheerio"),
	$ = cheerio.load("<h2 class="title">Hello World</h2>");
    $("h2.title").text("Hello there!");
    $("h2").addClass("welcome");
   
    $.html();
    // => <h2 class="title welcome">Hello there!</h2>

二、Installation
    npm install cheerio

三、Features
    1.相似的语法：cheerio包括了jQuery核心子集。cheerio从jquery库中除去了所有DOM不一致性和浏览器尴尬的部分，揭示了它真正优雅的API。
    2.闪电般的块：cheerio工作在一个非常简单、一致的DOM模型之上。解析、操作、呈送都变得高效。基础的端到端的基准测试显示cheerio大约比JSDOM快八倍。
    3.巨灵活：cheerio封装了兼容的htmlparser。cheerio几乎能够解析任何的html和XML document。
    
四、所有API会用到的HTML标记示例
    <ul id=“fruits”>
	<li class=“apple”>Apple</li>
	<li class=“orange”>Orange</li>
	<li class=“pear”>Pear</li>
    </ul>

  （1）Loading 加载HTML

    var cheerio = require("cheerio"),
	$ = cheerio.load("<ul id="fruits">...</ul>")

    或者通过专递字符串作为内容加载HTML
    $ = require("cheerio");
    $("ul", "<ul id="fruits>...</ul>")

    或者
    $ = require('cheerio');
    $('li', 'ul', '<ul id="fruits">...</ul>');

    你也可以传递一个额外的对象给.load()如果你需要更改任何的默认解析选项的话:
    $ = cheerio.load('<ul id="fruits">...</ul>', {
        ignoreWhitespace: true,
        xmlMode: true
    });
    这些解析选项都是直接来自htmlparser ，因此任何在htmlparser里有效的选项在Chreeio里也是行得通的。默认的选项如下:
   {
        ignoreWhitespace: false,
        xmlMode: false,
        lowerCaseTags: false
    }

   （2）Selectors 选择器(几乎和jquery一样，所以API也很相似)
    $(selector,[context],[root])

    选择器在context范围内搜索，context又在root范围内搜索。selector和context可是一个字符串表达式、DOM元素、DOM元素的数组、或者cheerio对象。root通常
    是HTML文档的字符串。
    $(".apple", "fruits").text()
    $("ul .pear").attr("class")
    $("li[class=orange]").html()

   （3）Attributes 获得和修改属性
    .attr(name,value)
    在匹配元素中只能获得第一个元素的属性。如果设置一个属性的值为null，则移除这个属性。也可以转递一对键值，或者一个函数
    $("ul").attr("id")
    $(".apple").attr("id", "favorite").html()

    value([value])
    获得和修改input,select,textarea的value.注意: 对于传递键值和函数的支持还没有被加进去。
    $('input[type="text"]').val()
    $('input[type="text"]').val('test').html()

    .removeAttr(name)
    通过name删除属性
    $('.pear').removeAttr('class').html()

    .hasClass( className )
    检查匹配的元素是否有给出的类名
    $('.pear').hasClass('pear')
    $('apple').hasClass('fruit')
    $('li').hasClass('pear')

    .addClass(className)
    增加class(es)给所有匹配的elements.也可以传函数。
    $('.pear').addClass('fruit').html()
    $('.apple').addClass('fruit red').html()

    .removeClass([className])
    从选择的elements里去除一个或多个有空格分开的class。如果className 没有定义，所有的classes将会被去除，也可以传函数。
    $('.pear').removeClass('pear').html()
    $('.apple').addClass('red').removeClass().html()

    .is.(selector)

    .is(function(index))

    有任何元素匹配selector就返回true。如果使用判定函数，判定函数在选中的元素中执行，所以this指向当前的元素。

   （4）Traversing 遍历

    .find(selector)
    获得一个在匹配的元素中由选择器滤过的后代。
    $('#fruits').find('li').length

    .parent([selector])
    获得每个匹配元素的parent,可选择性的通过selector筛选。
    $('.pear').parent().attr('id')

    .parents([selector])
    获得通过选择器筛选匹配的元素的parent集合。
    $('.orange').parents().length
    $('.orange').parents('#fruits').length

    .closest([selector])
    对于每个集合内的元素，通过测试这个元素和DOM层级关系上的祖先元素，获得第一个匹配的元素
    $('.orange').closest()
    // => []
    $('.orange').closest('.apple')
    // => []
    $('.orange').closest('li')
    // => [<li class="orange">Orange</li>]
    $('.orange').closest('#fruits')
    // => [<ul id="fruits"> ... </ul>]

    .next()
    获得第一个本元素之后的同级元素
    $('.apple').next().hasClass('orange')

    .nextAll()
    获得本元素之后的所有同级元素
    $('.apple').nextAll()

    .prev()
    获得本元素之前的第一个同级元素
    $('.orange').prev().hasClass('apple')

    .preAll()
    $('.pear').prevAll()
    获得本元素前的所有同级元素

    .slice(start,[end])
    获得选定范围内的元素
    $('li').slice(1).eq(0).text()
    $('li').slice(1, 2).length

    .siblings(selector)
    获得被选择的同级元素，除去自己
    $('.pear').siblings().length
    $('.pear').siblings('.orange').length

    .children(selector)
    获被选择元素的子元素
    $('#fruits').children().length
    $('#fruits').children('.pear').text()

    .each(function(index,element))
    迭代一个cheerio对象，为每个匹配元素执行一个函数。要提早跳出循环，返回false.
    var fruits = [];
    $('li').each(function(i, elem) {
      fruits[i] = $(this).text();
    });
    fruits.join(', ');
    //=> Apple, Orange, Pear

    .map(function(index,element))
    迭代一个cheerio对象，为每个匹配元素执行一个函数。Map会返回一个迭代结果的数组。
    $('li').map(function(i, el) {
      // this === el
      return $(this).attr('class');
    }).join(', ');
      //=> apple, orange, pear

    .filter(selector)
    .filter(function(index))
    迭代一个cheerio对象，滤出匹配选择器或者是传进去的函数的元素。如果使用函数方法，这个函数在被选择的元素中执行，所以this指向的手势当前元素。

    Selector:
    $('li').filter('.orange').attr('class');
    //=> orange

    Function:
    $('li').filter(function(i, el) {
      // this === el
      return $(this).attr('class') === 'orange';
    }).attr('class')
    //=> orange

    .first()
    会选择chreeio对象的第一个元素
    $('#fruits').children().first().text()

    .last()
    $('#fruits').children().last().text()
    会选择chreeio对象的最后一个元素

    .eq(i)
    通过索引筛选匹配的元素。使用.eq(-i)就从最后一个元素向前数。
    $('li').eq(0).text()
    $('li').eq(-1).text()

    （4）Manipulation 改变DOM结构的方法
    
     append(content,[content…])
     在每个元素最后插入一个子元素
     $('ul').append('<li class="plum">Plum</li>')
     $.html()
    
     .prepend(content,[content,…])
     在每个元素最前插入一个子元素
     $('ul').prepend('<li class="plum">Plum</li>')
     $.html()

     .after(content,[content,…])
     在每个匹配元素之后插入一个元素
     $('.apple').after('<li class="plum">Plum</li>')
     $.html()
     
     .before(content,[content,…])
     在每个匹配的元素之前插入一个元素
     $('.apple').before('<li class="plum">Plum</li>')
     $.html()
     
     .remove( [selector] )
     从DOM中去除匹配的元素和它们的子元素。选择器用来筛选要删除的元素。
     $('.pear').remove()
     $.html()
     
     replaceWith( content )
     替换匹配的的元素
     var plum = $('<li class="plum">Plum</li>')
     $('.pear').replaceWith(plum)
     $.html()
          
     .empty()
     清空一个元素，移除所有的子元素
     $('ul').empty()
     $.html()


     .html( [htmlString] )
     获得元素的HTML字符串。如果htmlString有内容的话，将会替代原来的HTML
     $('.orange').html()
     $('#fruits').html('<li class="mango">Mango</li>').html()

     .text( [textString] )
     获得元素的text内容，包括子元素。如果textString被指定的话，每个元素的text内容都会被替换。
     $('.orange').text()
     $('ul').text()
     
    （5）Rendering
     如果你想呈送document，你能使用html多效用函数
     $.html()
     //=>  <ul id="fruits">
     //      <li class="apple">Apple</li>
     //      <li class="orange">Orange</li>
     //      <li class="pear">Pear</li>
     //    </ul>

     如果你想呈送outerHTML,你可以使用 $.html(selector)
     $.html('.pear')
     //=> <li class="pear">Pear</li>

     默认的,html会让一些标签保持开标签的状态.有时候你想呈现一个有效的XML文档.例如下面这个:
     $ = cheerio.load('<media:thumbnail url="http://www.foo.com/keyframe.jpg" width="75" height="50" time="12:05:01.123"/>');
     然后为了呈现这个XML,你需要使用xml这个函数:
     $.xml()
     //=>  <media:thumbnail url="http://www.foo.com/keyframe.jpg" width="75" height="50" time="12:05:01.123"/>
     
    （6）Miscellaneous 其它
     
     不属于其它地方的DOM 元素方法

     .toArray()
     取得所有的在DOM元素，转化为数组
     $('li').toArray()
     //=> [ {...}, {...}, {...} ]

     .clone()
     克隆cheerio对象
     var moreFruit = $('#fruits').clone()
     
    （7）Utilities 工具
     
     $.root
     有时候你想找到最上层的root元素,那么$.root()就能获得:
     $.root().append('<ul id="vegetables"></ul>').html();
     //=> <ul id="fruits">...</ul><ul id="vegetables"></ul>
     $.contains( container, contained )

     查看cotained元素是否是container元素的子元素
     $.parseHTML( data [, context ] [, keepScripts ] )
     将字符串解析为DOM节点数组。context参数对chreeio没有意义，但是用来维护APi的兼容性。


	node express mongodb 例子：http://www.cnblogs.com/fu277/p/6714322.html